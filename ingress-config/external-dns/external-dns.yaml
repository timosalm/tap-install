#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")

#@ def azure_external_dns_config():
tenantId: #@ data.values.azure.tenant_id
subscriptionId: #@ data.values.azure.subscription_id
resourceGroup: #@ data.values.azure.resource_group
aadClientId: #@ data.values.azure.credentials.aad_client_id
aadClientSecret: #@ data.values.azure.credentials.aad_client_secret
#@ end

---
apiVersion: v1
kind: Namespace
metadata:
  name: external-dns
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: external-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
  namespace: external-dns
rules:
  - apiGroups: ['']
    resources: ['endpoints', 'pods', 'services', 'nodes']
    verbs: ['get', 'watch', 'list']
  - apiGroups: ['extensions']
    resources: ['ingresses']
    verbs: ['get', 'watch', 'list']
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get","watch","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
- kind: ServiceAccount
  name: external-dns
  namespace: external-dns
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: external-dns
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
      - name: external-dns
        image: k8s.gcr.io/external-dns/external-dns:v0.11.0
        args:
        - --source=service
        - --source=ingress
        - #@ "--domain-filter=" + str(data.values.ingress.domain)
#@ if "aws" in data.values:
        - --provider=aws
        - --aws-zone-type=public # Looks only at public hosted zones. Valid values are public, private, or no value for both.
        - --aws-prefer-cname
        - --policy=upsert-only
        - --txt-prefix=txt
        - #@ "--txt-owner-id=" + str(data.values.aws.route_fifty_three_zone_id)
        - --registry=txt
#@ elif "azure" in data.values:
        - --provider=azure
        - #@ "--azure-resource-group=" + str(data.values.azure.resource_group)
#@ end
#@ if "aws" in data.values:
        env:
         - name: AWS_ACCESS_KEY_ID
           valueFrom:
             secretKeyRef:
               name: route53-credentials
               key: aws_access_key_id
         - name: AWS_SECRET_ACCESS_KEY
           valueFrom:
             secretKeyRef:
               name: route53-credentials
               key: aws_secret_access_key
#@ elif "azure" in data.values:
        volumeMounts:
        - name: azure-config-file
          mountPath: /etc/kubernetes
          readOnly: true
      volumes:
      - name: azure-config-file
        secret:
          secretName: azure-config-file
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  namespace: external-dns
#@ if "aws" in data.values:
  name: route53-credentials
#@ elif "azure" in data.values:
  name: azure-config-file
#@ end
#@ if "aws" in data.values:
stringData:
  aws_access_key_id: #@ data.values.aws.credentials.accessKey
  aws_secret_access_key: #@ data.values.aws.credentials.secretKey
#@ elif "azure" in data.values:
stringData:
  azure.json: #@ json.encode(azure_external_dns_config())
#@ end
